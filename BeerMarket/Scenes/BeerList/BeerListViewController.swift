//
//  BeerListViewController.swift
//  BeerMarket
//
//  Created by Matheus Cardoso kuhn on 01/07/19.
//  Copyright (c) 2019 MDT. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol BeerListDisplayLogic: class {
    func displayBeer(viewModel: BeerList.BeerModel.ViewModel)
    func displayImage(viewModel: BeerList.Image.ViewModel)
    func displayError(viewModel: BeerList.ErrorModel.ViewModel)
}

class BeerListViewController: UIViewController {
    
    // MARK: - IBOutlets
    @IBOutlet weak var tableViewContent: UITableView!
    
    // MARK: - Variables
    var interactor: BeerListBusinessLogic?
    var router: (NSObjectProtocol & BeerListRoutingLogic & BeerListDataPassing)?
    var beers: [BeerList.BeerModel.ViewModel.DecribedBeer] = []
    
    // MARK: - Object Life Cycle
    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setup()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setup()
    }
    
    // MARK: - Setup
    private func setup() {
        let viewController = self
        let interactor = BeerListInteractor()
        let presenter = BeerListPresenter()
        let router = BeerListRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    // MARK: - Routing
    override func prepare(for segue: UIStoryboardSegue, sender: Any?) {
        if let scene = segue.identifier {
            let selector = NSSelectorFromString("routeTo\(scene)WithSegue:")
            if let router = router, router.responds(to: selector) {
                router.perform(selector, with: segue)
            }
        }
    }
    
    // MARK: - View Life Cycle
    override func viewDidLoad() {
        super.viewDidLoad()
        tableViewContent.register(UINib(nibName: "BeerTableViewCell", bundle: nil), forCellReuseIdentifier: "Beer")
        tableViewContent.rowHeight = 100
        doBeerList()
    }
    
    // MARK: - Beer
    func doBeerList() {
        interactor?.doBeerList()
    }
}

// MARK: - BeerListDisplayLogic
extension BeerListViewController: BeerListDisplayLogic {
    
    func displayBeer(viewModel: BeerList.BeerModel.ViewModel) {
        beers.append(contentsOf: viewModel.beers)
        tableViewContent.reloadData()
    }
    
    func displayImage(viewModel: BeerList.Image.ViewModel) {
        DispatchQueue.main.sync {
            guard let cell = tableViewContent.cellForRow(at: IndexPath(row: viewModel.row, section: 0)) as? BeerTableViewCell else { return }
            cell.imageViewIcon.image = viewModel.image
        }
    }
    
    func displayError(viewModel: BeerList.ErrorModel.ViewModel) {
        DispatchQueue.main.sync {
            //TODO: Show error in an alert.
            debugPrint(viewModel.error)
        }
    }
}

//MARK: - UITableViewDataSource
extension BeerListViewController: UITableViewDataSource {
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        return beers.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        guard let cell = tableView.dequeueReusableCell(withIdentifier: "Beer") as? BeerTableViewCell else { return UITableViewCell() }
        let rowBeer = beers[indexPath.row]
        cell.labelName.text = rowBeer.name
        cell.labelAlcoholByVolume.text = rowBeer.alcoholByVolume
        cell.imageViewIcon.image = UIImage(named: "unkownBeer")
        interactor?.doImage(request: BeerList.Image.Request(row: indexPath.row, url: rowBeer.imageURL))
        return cell
    }
}
